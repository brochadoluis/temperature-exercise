// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: temperature.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TemperatureClient is the client API for Temperature service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemperatureClient interface {
	ListTemperature(ctx context.Context, in *ListTemperatureRequest, opts ...grpc.CallOption) (*ListTemperatureResponse, error)
	SaveTemperature(ctx context.Context, in *SaveTemperatureRequest, opts ...grpc.CallOption) (*SaveTemperatureResponse, error)
}

type temperatureClient struct {
	cc grpc.ClientConnInterface
}

func NewTemperatureClient(cc grpc.ClientConnInterface) TemperatureClient {
	return &temperatureClient{cc}
}

func (c *temperatureClient) ListTemperature(ctx context.Context, in *ListTemperatureRequest, opts ...grpc.CallOption) (*ListTemperatureResponse, error) {
	out := new(ListTemperatureResponse)
	err := c.cc.Invoke(ctx, "/temperature.Temperature/ListTemperature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureClient) SaveTemperature(ctx context.Context, in *SaveTemperatureRequest, opts ...grpc.CallOption) (*SaveTemperatureResponse, error) {
	out := new(SaveTemperatureResponse)
	err := c.cc.Invoke(ctx, "/temperature.Temperature/SaveTemperature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemperatureServer is the server API for Temperature service.
// All implementations must embed UnimplementedTemperatureServer
// for forward compatibility
type TemperatureServer interface {
	ListTemperature(context.Context, *ListTemperatureRequest) (*ListTemperatureResponse, error)
	SaveTemperature(context.Context, *SaveTemperatureRequest) (*SaveTemperatureResponse, error)
	mustEmbedUnimplementedTemperatureServer()
}

// UnimplementedTemperatureServer must be embedded to have forward compatible implementations.
type UnimplementedTemperatureServer struct {
}

func (UnimplementedTemperatureServer) ListTemperature(context.Context, *ListTemperatureRequest) (*ListTemperatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemperature not implemented")
}
func (UnimplementedTemperatureServer) SaveTemperature(context.Context, *SaveTemperatureRequest) (*SaveTemperatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTemperature not implemented")
}
func (UnimplementedTemperatureServer) mustEmbedUnimplementedTemperatureServer() {}

// UnsafeTemperatureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemperatureServer will
// result in compilation errors.
type UnsafeTemperatureServer interface {
	mustEmbedUnimplementedTemperatureServer()
}

func RegisterTemperatureServer(s grpc.ServiceRegistrar, srv TemperatureServer) {
	s.RegisterService(&Temperature_ServiceDesc, srv)
}

func _Temperature_ListTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServer).ListTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temperature.Temperature/ListTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServer).ListTemperature(ctx, req.(*ListTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Temperature_SaveTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureServer).SaveTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temperature.Temperature/SaveTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureServer).SaveTemperature(ctx, req.(*SaveTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Temperature_ServiceDesc is the grpc.ServiceDesc for Temperature service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Temperature_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "temperature.Temperature",
	HandlerType: (*TemperatureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTemperature",
			Handler:    _Temperature_ListTemperature_Handler,
		},
		{
			MethodName: "SaveTemperature",
			Handler:    _Temperature_SaveTemperature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "temperature.proto",
}
